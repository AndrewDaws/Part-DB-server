<?php
/**
 * This file is part of Part-DB (https://github.com/Part-DB/Part-DB-symfony).
 *
 * Copyright (C) 2019 - 2020 Jan BÃ¶hmer (https://github.com/jbtronics)
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */

namespace App\Repository;


use App\Entity\Base\DBElement;
use App\Entity\LogSystem\AbstractLogEntry;
use Doctrine\ORM\EntityRepository;

class LogEntryRepository extends EntityRepository
{

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        //Emulate a target element criteria by splitting it manually in the needed criterias
        if (isset($criteria['target']) && $criteria['target'] instanceof DBElement) {
            $element = $criteria['target'];
            $criteria['target_id'] = $element;
            $criteria['target_type'] = AbstractLogEntry::targetTypeClassToID(get_class($element));
            unset($criteria['target']);
        }

        return parent::findBy($criteria, $orderBy, $limit, $offset); // TODO: Change the autogenerated stub
    }

    /**
     * Find log entries associated with the given element (the history of the element)
     * @param  DBElement  $element The element for which the history should be generated
     * @param  string  $order By default newest entries are shown first. Change this to ASC to show oldest entries first.
     * @param  null  $limit
     * @param  null  $offset
     * @return AbstractLogEntry[]
     */
    public function getElementHistory(DBElement $element, $order = 'DESC', $limit = null, $offset = null)
    {
        return $this->findBy(['element' => $element], ['timestamp' => $order], $limit, $offset);
    }

    /**
     * Gets the target element associated with the logentry.
     * @param AbstractLogEntry $logEntry
     * @return DBElement|null Returns the associated DBElement or null if the log either has no target or the element
     * was deleted from DB.
     */
    public function getTargetElement(AbstractLogEntry $logEntry): ?DBElement
    {
        $class = $logEntry->getTargetClass();
        $id = $logEntry->getTargetID();

        if ($class === null || $id === null) {
            return null;
        }

        return $this->getEntityManager()->find($class, $id);
    }
}